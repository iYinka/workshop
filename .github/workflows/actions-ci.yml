name: Github Action Demo on Econtact NodeJS Application
run-name: ${{github.actor}}

on:
    pull_request:
      branches: [ master ]
      paths:
        - econtact_server/**
        - econtact_server/build

jobs:
    nodejs_setup:
        name: NodeJS Development Github Actions test
        runs-on: ubuntu-latest
        defaults:
          run:
           working-directory: ./econtact_server
        permissions:
          contents: write
          pull-requests: write
          repository-projects: write


        steps:
            - name: Check out Git repository
              uses: actions/checkout@v4

            - name: NodeJS setup
              uses: actions/setup-node@v4

            - name: Install dependencies
              id: dep-installation
              run: |
                  npm cinstall
                  npm cinstall --only=dev

            - name: Run ESLint
              if: steps.dep-installation.outcome == 'success'
              id: eslint
              continue-on-error: true
              run: npm run lint

            - name: NPM test
              id: test
              continue-on-error: true
              run: npm run test --if-present

            - name: NPM run build
              if: steps.dep-installation.outcome && steps.eslint.outcome == 'success'
              continue-on-error: true
              id: build
              run: npm run build


            - name: Archive Production App Artifact
              if: steps.build.outcome == 'success'
              id: artifact-build
              uses: actions/upload-artifact@v4
              with:
                name: Build App Artifact
                path: econtact_server/dist

            - name: PR Comments
              if: contains(fromJSON('["push", "pull_request"]'), github.event_name)
              uses: actions/github-script@v7
              with:
                script: |
                    console.log(context.issue.number)
                    console.log(context.issue)
                    console.log(${{ steps.dep-installation}})
                    console.log(${{ steps.eslint}})
                    console.log(${{ steps.test}})
                    console.log(${{ steps.build}})
                    console.log(${{ steps.artifact-build}})
                    const body = `Hi! 👋 Thanks for taking the time to contribute to our project. We're excited to review your changes.

                    *Repo: ${{github.repository}}, URL: ${{github.repositoryUrl}}
                    *Owner: @${{github.repository_owner}}
                    *Pusher: @${{github.actor}}, workflow: ${{github.workflow}}
                    #### Dependencies Installation \`${{steps.dep-installation.outcome}}\`
                    #### Lint \`${{steps.eslint.outcome}}\`
                    #### test \`${{steps.test.outcome}}\`
                    #### build \`${{steps.build.outcome}}\`
                    #### artifact \`${{steps.artifact-build.outcome}}\`

                    Kindly make give do a pull request but first take a look at the [contributing guide](CONTRIBUTING.md). Your PR will be responded to accordingly 👍.

                    Happy PR-ing!!! 😂`

                    await  github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: body
                      })

  #  create-issue-if-jo-fails:
  #     needs: nodejs_setup
  #     runs-on: ubuntu-latest
  #     if: always() && needs.nodejs_setup.result == 'failure'
  #     steps:
  #       - name: Checkout Code
  #         uses: actions/checkout@v4

  #       - name: Create Issue
  #         uses: dacbd/create-issue-action@main
  #         with:
  #           token: ${{ github.token }}
  #           title: |
  #             [${{ github.workflow }}] failed during [${{ github.event_name }}]

  #           # Auto-assign person who triggered the failure.
  #           assignees: ${{ github.actor }},${{ github.triggering_actor }}
  #           labels: CICD
  #           body: |
  #             ## Failure Report:

  #             > [!IMPORTANT]
  #             > Details on failed run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
  #             - Author: @${{ github.triggering_actor }}
  #             - Branch: `${{ github.ref }}`
  #             - Commit: ${{ github.sha }}
  #             - Workflow Path: `${{ github.workflow_ref }}`

  #             - [ ] **Task**: Review failed run, fix the issue(s), and re-run until successful.



    label_issues:
        runs-on: ubuntu-latest
        permissions:
          issues: write
        steps:
          - run: gh issue edit "$NUMBER" --add-label "$LABELS"
            env:
              GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              GH_REPO: ${{ github.repository }}
              NUMBER: ${{ github.event.pull_request.number }}
              LABELS: triage